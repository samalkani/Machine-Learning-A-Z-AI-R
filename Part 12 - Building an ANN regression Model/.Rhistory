plot(log(kmfit2$time),log(kmfit2$surv/(1-kmfit2$surv)))
# Re-run the stratified Cox model without the Frailty (random) component.
Y=Surv(addicts$survt,addicts$status==1)
coxph(Y~ prison + dose + strata(clinic),data=addicts)
# Run the stratified Cox model with Frailty (random) component.
coxph(Y~ prison + dose + strata(clinic) + frailty(clinic,distribution="gamma"),data=addicts)
# Run the Cox model without the CLINIC variable and without FRAILTY.
coxph(Y~ prison + dose,data=addicts)
# Run the Cox model without the CLINIC variable and with FRAILTY
coxph(Y~ prison + dose + frailty(clinic,distribution="gamma"),data=addicts)
# Detailed output for the Cox model without CLINIC variable and with FRAILTY
summary(coxph(Y~ prison + dose + frailty(clinic,distribution="gamma"), data=addicts))
library(base64enc)
install.packages("AHPtools")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
sessionInfo()
sessionInfo()
sessionInfo()
setwd("D:/Ajay Files/S01 - Machine-Learning-A-Z-Codes-Datasets/Machine-Learning-A-Z-Codes-Datasets/Part 14 - Building an ANN regression Model/combined+cycle+power+plant/CCPP")
dataset = read.csv("Folds5x2_pp.csv")
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
library(data.table)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[-5])
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
library(Metrics)
install.packages("Metrics")
library(Metrics)
rmse(test_set$PE, y_pred)
library(Metrics)
mse(test_set$PE, y_pred)
rmse(test_set$PE, y_pred)
r2(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - rss/tss
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
rsq
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
library(caret)
res <- caret::postResample(test_set$PE, y_pred)
res <- caret::postResample(test_set$PE, y_pred)
# Performance Metrics
install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error"
install.packages("Metrics")
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
# Importing the dataset
dataset = read.csv("Folds5x2_pp.csv")
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
library(data.table)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", RMSE))
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
# Importing the dataset
dataset = read.csv("Folds5x2_pp.csv")
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
library(data.table)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
# Importing the dataset
dataset = read.csv("Folds5x2_pp.csv")
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
library(data.table)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
h2o.shutdown()
h2o.shutdown()
# Importing the dataset
dataset = read.csv("Folds5x2_pp.csv")
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
View(dataset)
View(test_set)
View(training_set)
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
# Importing the dataset
dataset = read.csv("Folds5x2_pp.csv")
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
# Shutdown H2O
h2o.shutdown()
knitr::opts_chunk$set(echo = TRUE)
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
dataset = read.csv("Folds5x2_pp.csv")
head(dataset)
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
head(training_set)
head(test_set)
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
# Importing the dataset
dataset = read.csv("Folds5x2_pp.csv")
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set[5], y_pred)
y_pred = as.vector(y_pred)
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set[5], y_pred)
RMSE = rmse(test_set[5], y_pred)
rss <- sum((y_pred - test_set[5]) ^ 2)
tss <- sum((test_set[5] - mean(test_set[5])) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
y_pred = as.numeric(as.vector(y_pred))
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set[5], y_pred)
RMSE = rmse(test_set[5], y_pred)
rss <- sum((y_pred - test_set[5]) ^ 2)
tss <- sum((test_set[5] - mean(test_set[5])) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
y_pred = as.numeric(as.vector(y_pred))
test_set = as.numeric(as.vector(test_set))
y_pred = as.numeric(as.vector(y_pred))
test_set = as.numeric(as.vector(test_set))
test_set = as.vector(test_set)
test_set = as.vector(test_set)
library(Metrics)
MSE = mse(test_set[5], y_pred)
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
y_pred = as.vector(y_pred)
test_set = as.vector(test_set)
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
y_pred = (y_pred)
test_set = as.vector(test_set)
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
y_pred = (y_pred)
test_set = (test_set)
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
# Importing the dataset
dataset = read.csv("Folds5x2_pp.csv")
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PE, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "PE",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
y_pred = (y_pred)
test_set = (test_set)
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
y_pred = (y_pred)
test_set = as.vector(test_set)
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
y_pred = as.vector(y_pred)
test_set = as.vector(test_set)
# Performance Metrics
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-5]))
head(y_pred)
head(test_set[5])
y_pred = as.vector(y_pred)
test_set = as.vector(test_set)
# install.packages("Metrics")
library(Metrics)
MSE = mse(test_set$PE, y_pred)
RMSE = rmse(test_set$PE, y_pred)
rss <- sum((y_pred - test_set$PE) ^ 2)
tss <- sum((test_set$PE - mean(test_set$PE)) ^ 2)
rsq <- 1 - (rss/tss)
print(paste("Mean Squared Error", MSE))
print(paste("Root Mean Squared Error", RMSE))
print(paste("R Squared", rsq))
h2o.shutdown()
h2o.shutdown()
