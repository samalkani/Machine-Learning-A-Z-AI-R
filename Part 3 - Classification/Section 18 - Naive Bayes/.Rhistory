knitr::opts_chunk$set(echo = TRUE)
# Read CSV file
addicts <- read.csv("addicts.csv")
addicts[1:5,]
addicts[1:5,1:6]
# Read CSV file
addicts <- read.csv("addicts.csv")
addicts[1:5,]
addicts[1:5,1:6]
library(survival)
Surv(addicts$survt,addicts$status==1)
summary(survfit(Surv(addicts$survt,addicts$status==1)~1))
Y=Surv(addicts$survt,addicts$status==1)
Y~1
Y~addicts$clinic
kmfit1=survfit(Y~1)
kmfit1
summary(kmfit1)
summary(kmfit1,times=365)
kmfit2=survfit(Y~addicts$clinic)
summary(kmfit2,times=c(0,100,200,300,400,500,600,700,800,900,1000))
summary(kmfit2,times=100*(0:10))
plot(kmfit2)
plot(kmfit2, lty=c("solid", "dashed"), col=c("black","grey"),
xlab="survival time in days", ylab="survival probabilities")
plot(kmfit2, lty = c("solid", "dashed"), col=c("red","green"),
xlab="survival time in days", ylab="survival probabilities")
survdiff(Surv(survt,status)~clinic, data=addicts)
attach(addicts)
survdiff(Surv(survt,status)~clinic)
detach(addicts)
survdiff(Surv(survt,status)~clinic,data=addicts,rho = 1)
survdiff(Surv(survt,status)~clinic + strata(prison),data=addicts)
plot(kmfit2,fun="cloglog",xlab = "time in days using logarithmic scale",
ylab = "log-logsurvival",main="log-log curves by clinic")
kmfit3=summary(kmfit2)
names(kmfit3)
kmfit4=data.frame(kmfit3$strata,kmfit3$time,kmfit3$surv)
names(kmfit4)=c("clinic","time","survival")
kmfit4[1:5,]
clinic1=kmfit4[kmfit4$clinic=="addicts$clinic=1",]
clinic2=kmfit4[kmfit4$clinic=="addicts$clinic=2",]
clinic1[1:5,]
clinic2[1:5,]
plot(clinic1$time,log(-log(clinic1$survival)),
xlab = "survival time in days",ylab = "log-log survival",
xlim=c(0,800),col="black",type='l',lty="solid",main="log-log curves by clinic")
par(new=T)
plot(clinic2$time,log(-log(clinic2$survival)),axes=F,xlab = "survival time in days",
ylab="log-log survival",col="grey50",type='l',lty="dashed")
legend("bottomright",c("Clinic 1","Clinic 2"),
lty = c("solid","dashed"),col = c("black","grey50"))
Y=Surv(addicts$survt,addicts$status==1)
coxph(Y~prison + dose + clinic,data=addicts)
summary(coxph(Y~prison+dose+clinic,data=addicts))
coxph(Y~prison + dose + clinic,data=addicts, method="efron")
coxph(Y~prison + dose + clinic,data=addicts, method="breslow")
coxph(Y~prison + dose + clinic,data=addicts, method="exact")
mod1=coxph(Y~prison + dose + clinic,data=addicts)
mod2=coxph(Y~prison + dose + clinic + clinic*prison + clinic*dose, data=addicts)
mod1
mod2
names(mod2)
mod2$loglik
mod2[[3]]
(-2)*(mod1$loglik[2]-mod2$loglik[2])
LRT=(-2)*(mod1$loglik[2]-mod2$loglik[2])
Pvalue = 1 - pchisq(LRT,2)
Pvalue
lrt.surv=function(mod.full,mod.reduced,df){
lrts=(-2)*(mod.full$loglik[2]-mod.reduced$loglik[2])
pvalue=1-pchisq(lrts,df)
return(pvalue)
}
lrt.surv(mod1,mod2, 2)
Y=Surv(addicts$survt,addicts$status==1)
coxph(Y~ prison + dose + strata(clinic),data = addicts)
coxph(Y~prison + dose + clinic:prison + clinic:dose + strata(clinic),data=addicts)
addicts$clinic2=addicts$clinic-2
summary(coxph(Y~prison + dose + clinic2:prison +
clinic2:dose+strata(clinic2),data=addicts))
Y=Surv(addicts$survt,addicts$status==1)
mod1=coxph(Y~prison + dose + clinic,data=addicts)
cox.zph(mod1,transform=rank)
plot(cox.zph(mod1,transform=rank),se=F,var='clinic')
# Run Cox unadjusted model
Y=Surv(addicts$survt,addicts$status==1)
mod1=coxph(Y~prison + dose + clinic, data=addicts)
# Adjusted Cox model with the adjustments as follows
# PRISON = 0, DOSE=70 AND CLINIC=2
# CREATE DATA FRAME FIRST
pattern1=data.frame(prison=0,dose=70,clinic=2)
pattern1
# use summary function to get the Cox adjusted survival estimates
summary(survfit(mod1,newdata=pattern1))
# plot of the adjusted survival curve
plot(survfit(mod1, newdata=pattern1),
conf.int=F,main="Adjusted survival for prison=0, dose=70, clinic=2")
# stratified cox model
mod3=coxph(Y~prison + dose + strata(clinic),data=addicts)
# stratified cox model controlling for PRISON and DOSE
# Creation of one observation data frame, with the mean for prison and dose.
pattern2=data.frame(prison=0.46,dose=60.40)
#Plotting adjusted survival curve with clinic as the strata
plot(survfit(mod3,newdata=pattern2), conf.int=F, lty=c("solid","dashed"),
col=c("red","green"), main="Survival curves for clinic, adjusted for prison and dose")
legend("topright",c("Clinic 1","Clinic 2"),lty=c("solid","dashed"), col=c("red","green"))
# Plotting adjusted log-log survival curves for clinic
plot(survfit(mod3,newdata = pattern2),fun="cloglog",
main="Log-Log curves for clinic, adjusted for prison and dose")
# Plotting adjusted log-log survival curves for clinic with the time scale not logged
sum.mod3=summary(survfit(mod3,newdata=pattern2))
# similar code to section 3
sum.mod4=data.frame(sum.mod3$strata,sum.mod3$time,sum.mod3$surv)
colnames(sum.mod4)=c("clinic","time","survival")
clinic1=sum.mod4[sum.mod4$clinic=="clinic=1",]
clinic2=sum.mod4[sum.mod4$clinic=="clinic=2",]
# plot
plot(clinic1$time,log(-log(clinic1$survival)),xlab="survival time in days",ylab="log-log survival",xlim=c(0,800),col=
"red",type='l',lty="solid", main="log-log curves stratified by
clinic, adjusted for prison, dose")
par(new=T)
plot(clinic2$time,log(-log(clinic2$survival)),axes=F,xlab=
"survival time in days",ylab="log-log survival",col="green",
type='l',lty="dashed")
legend("bottomright",c("Clinic 1","Clinic 2"), lty=c("solid","dashed"),col=c("red","green"))
par(new=F)
# Transforming the dataset into counting process (start, stop) format
# to run an extended Cox model
addicts.cp=survSplit(addicts,cut=addicts$survt[addicts$status==1],
end="survt", event="status",start="start")
nrow(addicts.cp)
# Creation of a new variable based on multiplying the variable dose with the log of the survival
# time. This variable is created because we suspect that the variable dose has failed the proportional
# hazards assumption.
addicts.cp$logtdose=addicts.cp$dose*log(addicts.cp$survt)
# For the new variable DOSE=ln(DOSE)*T, which varies over time we print observation 106
# who had an event at time = 35 days for a selected group of variables
addicts.cp[addicts.cp$id==106,c('id','start','survt','status','dose','logtdose')]
# Run the extended Cox model with the inclusion of predictors;
# PRISON, DOSE, and CLINIC, and  time dependent variable LOGTDOSE
coxph(Surv(addicts.cp$start,addicts.cp$survt,addicts.cp$status) ~
prison + dose + clinic + logtdose + cluster(id),data=addicts.cp)
# Running the extended Cox model with a time cutpoint of 365 days
# Essentially splitting the time of the study into observations
# below 365 days and observations above 365 days
addicts.cp365=survSplit(addicts,cut=365,end="survt", event="status",start="start")
# Defining the timepoint 365 days and the two time intervals (heaviside functions) above and below 365 days
addicts.cp365$hv1=addicts.cp365$clinic*(addicts.cp365$start<365)
addicts.cp365$hv2=addicts.cp365$clinic*(addicts.cp365$start>=365)
# Sort the dataset by variables ID and START
addicts.cp365=addicts.cp365[order(addicts.cp365$id,addicts.cp365$start),]
# Printout of the first 10 observations for selected variables
addicts.cp365[1:10,c('id','start', 'survt','status','clinic','hv1','hv2')]
# Running an extended Cox model with heaviside functions (time intervals)
# Define the object for the response variable
Y365=Surv(addicts.cp365$start,addicts.cp365$survt,addicts.cp365$status)
# Run the Cox extended model with the two heaviside functions
coxph(Y365 ~ prison + dose + hv1 + hv2 + cluster(id), data=addicts.cp365)
# Handling ties in the two different time intervals (heaviside functions)
coxph(Y365 ~ prison + dose +hv1 + hv2,data=addicts.cp365,method="breslow")
# Run Cox extended model with one heaviside function and the variable CLINIC
coxph(Y365 ~ prison + dose + clinic + hv2 + cluster(id),data=addicts.cp365)
# log-log survival vs time in days using log-time plot
plot(survfit(Y~addicts$clinic),fun="cloglog",xlab="time in days using log-
arithmic scale",ylab="log-log survival", main="log-log curves by clinic")
# Exponential AFT model
modpar1=survreg(Surv(addicts$survt,addicts$status) ~ prison + dose +
clinic,data=addicts,dist="exponential")
summary(modpar1)
# Weibull AFT model
modpar2=survreg(Surv(addicts$survt,addicts$status)
~ prison + dose + clinic,data=addicts,dist="weibull")
summary(modpar2)
# Use of predict function to estimate then median or any other quantile time to event
# for any pattern of co-variates
# Co-variate pattern; PRISON=1, DOSE=50 AND CLINIC=1
pattern1=data.frame(prison=1,dose=50,clinic=1)
pct=c(0.25,0.50,0.75)
days=predict(modpar2,newdata=pattern1,type="quantile",p=pct)
cbind(pct,days) # adds vectors pct and days to create a matrix containing both vectors
# Creating a plot for individual with covariate pattern;  PRISON=1, DOSE=50 AND CLINIC=1
pct2=0:100/100
days2=predict(modpar2,newdata=pattern1,type="quantile",p=pct2)
survival=1-pct2
plot(days2,survival,xlab="survival time in days",ylab="survival
probabilities",main="Weibull survival estimates for prison=0,
dose=50, clinic=1",xlim=c(0,800))
# log-logistic AFT model
modpar3=survreg(Surv(addicts$survt,addicts$status)~
prison + dose + clinic,data=addicts,dist="loglogistic")
summary(modpar3)
# Kaplan Meier (KM) estimates object
kmfit2=survfit(Surv(addicts$survt,addicts$status)~addicts$clinic)
plot(log(kmfit2$time),log(kmfit2$surv/(1-kmfit2$surv)))
# Re-run the stratified Cox model without the Frailty (random) component.
Y=Surv(addicts$survt,addicts$status==1)
coxph(Y~ prison + dose + strata(clinic),data=addicts)
# Run the stratified Cox model with Frailty (random) component.
coxph(Y~ prison + dose + strata(clinic) + frailty(clinic,distribution="gamma"),data=addicts)
# Run the Cox model without the CLINIC variable and without FRAILTY.
coxph(Y~ prison + dose,data=addicts)
# Run the Cox model without the CLINIC variable and with FRAILTY
coxph(Y~ prison + dose + frailty(clinic,distribution="gamma"),data=addicts)
# Detailed output for the Cox model without CLINIC variable and with FRAILTY
summary(coxph(Y~ prison + dose + frailty(clinic,distribution="gamma"), data=addicts))
library(base64enc)
install.packages("AHPtools")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
sessionInfo()
sessionInfo()
sessionInfo()
setwd("D:/Ajay Files/S01 - Machine-Learning-A-Z-Codes-Datasets/Machine-Learning-A-Z-Codes-Datasets/Part 3 - Classification/Section 18 - Naive Bayes/R")
# install.packages("e1071")
library(e1071)
# Naive Bayes Classifier
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[3:5]
# Encoding the target feature as factor
dataset$Purchased = factor(dataset$Purchased, levels = c(0, 1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-3] = scale(training_set[-3])
test_set[-3] = scale(test_set[-3])
classifier = naiveBayes(x = training_set[,-3],
y = training_set$Purchased)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
y_pred
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
# Visualising the Training set results
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Naive Bayes (Training set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'dodgerblue', 'salmon'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'dodgerblue3', 'salmon3'))
# Visualising the Test set results
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'Naive Bayes (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'dodgerblue', 'salmon'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'dodgerblue3', 'salmon3'))
