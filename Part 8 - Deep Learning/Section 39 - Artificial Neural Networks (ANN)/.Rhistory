# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Encoding categorical data
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0))
# dataset$Geography = as.numeric(dataset$Geography)
# dataset$Gender = as.numeric(dataset$Gender)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
knitr::opts_chunk$set(echo = TRUE)
dataset = read.csv('Churn_Modelling.csv')
head(dataset)
dataset = dataset[, 4:14]
head(dataset)
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0))
head(dataset)
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
head(training_set)
head(test_set)
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Encoding categorical data
dataset$Geography = factor(as.numeric(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = factor(as.numeric(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0)))
# dataset$Geography = as.numeric(dataset$Geography)
# dataset$Gender = as.numeric(dataset$Gender)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Encoding categorical data
dataset$Geography = factor(as.numeric(dataset$Geography),
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(as.numeric(dataset$Gender),
levels = c('Male', 'Female'),
labels = c(1, 0))
# dataset$Geography = as.numeric(dataset$Geography)
# dataset$Gender = as.numeric(dataset$Gender)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
dataset$Geography = factor(as.numeric(dataset$Geography)
dataset$Geography = as.factor(as.numeric(dataset$Geography),
dataset$Geography = factor(as.numeric(dataset$Geography),
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
dataset$Geography = factor(as.numeric(dataset$Geography),
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(as.numeric(dataset$Gender),
levels = c('Male', 'Female'),
labels = c(1, 0))
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0))
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0))
dataset = read.csv('Churn_Modelling.csv')
View(dataset)
dataset = dataset[4:14]
View(dataset)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0)))
View(dataset)
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0)))
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the target feature as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0)))
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the target feature as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0)))
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the target feature as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the target feature as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# Encoding the target feature as factor
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
View(training_set)
View(test_set)
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
View(dataset)
# Encoding categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(0, 1)))
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Encoding categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
View(test_set)
View(training_set)
install.packages("h2o")
library(h20)
library(h20)
library(h2o)
h2o.init(nthreads = -1)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
install.packages("data.table")
install.packages("data.table")
library(data.table)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-11])
classifier = h2o.deeplearning(y = "Exited",
training_frame = training_set,
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.h20(test_set[-11]))
library(h2o)
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.h20(test_set[-11]))
# Predicting the Test set results
y_pred = predict(classifier, newdata = as.h2o(test_set[-11]))
# Making the Confusion Matrix
cm = table(as.h2o(test_set[, 11]), y_pred)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.5)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
# Artificial Neural Network
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Encoding categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
# Fitting ANN to the Training set
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
library(data.table)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.5)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (y_pred > 0.5)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
accuracy <- sum(diag(cm)) / sum(cm)
precision <- cm[2, 2] / sum(cm[2, ])
recall <- cm[2, 2] / sum(cm[, 2])
f1_score <- 2 * (precision * recall) / (precision + recall)
print(paste("Accuracy:", accuracy))
print(paste("Precision:", precision))
print(paste("Recall:", recall))
print(paste("F1 Score:", f1_score))
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Predicting the Test set results
y_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(y_pred > 0.5, 1, 0)
y_pred = as.vector(y_pred)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
# Performance metrics
accuracy <- sum(diag(cm)) / sum(cm)
precision <- cm[2, 2] / sum(cm[2, ])
recall <- cm[2, 2] / sum(cm[, 2])
f1_score <- 2 * (precision * recall) / (precision + recall)
print(paste("Accuracy:", accuracy))
print(paste("Precision:", precision))
print(paste("Recall:", recall))
print(paste("F1 Score:", f1_score))
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
prob_pred
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = ifelse(prob_pred > 0.5, 1, 0)
# Predicting the Test set results
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
View(test_set)
# Making the Confusion Matrix
cm = table(test_set[, 11], y_pred)
cm
# Performance metrics
accuracy <- sum(diag(cm)) / sum(cm)
precision <- cm[2, 2] / sum(cm[2, ])
recall <- cm[2, 2] / sum(cm[, 2])
f1_score <- 2 * (precision * recall) / (precision + recall)
print(paste("Accuracy:", accuracy))
print(paste("Precision:", precision))
print(paste("Recall:", recall))
print(paste("F1 Score:", f1_score))
h2o.shutdown()
h2o.shutdown()
knitr::opts_chunk$set(echo = TRUE)
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
head(training_set)
head(test_set)
# install.packages("h2o")
# install.packages("data.table")
library(h2o)
library(data.table)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = "Exited",
training_frame = as.h2o(training_set),
activation = "Rectifier",
hidden = c(6,6),
epochs = 100,
train_samples_per_iteration = -2)
summary(classifier)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
test_set[-11]
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
test_set[11]
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
y_pred
test_set$Exited
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
print("y_pred:", y_pred)
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
print(paste("y_pred:", y_pred))
print(paste("Actual results:", test_set$Exited))
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
print(paste("Predicted:", y_pred))
print(paste("Actual:", test_set$Exited))
prob_pred = h2o.predict(classifier, newdata = as.h2o(test_set[-11]))
y_pred = (prob_pred > 0.5)
y_pred = as.vector(y_pred)
head(paste("Predicted:", y_pred))
head(paste("Actual:", test_set$Exited))
cm = table(test_set[, 11], y_pred)
cm
accuracy <- sum(diag(cm)) / sum(cm)
precision <- cm[2, 2] / sum(cm[2, ])
recall <- cm[2, 2] / sum(cm[, 2])
f1_score <- 2 * (precision * recall) / (precision + recall)
print(paste("Accuracy:", accuracy))
print(paste("Precision:", precision))
print(paste("Recall:", recall))
print(paste("F1 Score:", f1_score))
dataset = read.csv('Churn_Modelling.csv')
head(dataset)
dataset = dataset[, 4:14]
head(dataset)
dataset$Geography = factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Gender = factor(dataset$Gender,
levels = c('Male', 'Female'),
labels = c(1, 0))
head(dataset)
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
head(training_set)
head(test_set)
training_set[-11] = scale(training_set[-11])
# Feature Scaling
training_set[-11] = scale(training_set[-11])
# Importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[, 4:14]
# Encoding categorical data
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
head(training_set)
head(test_set)
training_set[-11] = scale(training_set[-11])
test_set[-11] = scale(test_set[-11])
head(training_set)
head(test_set)
h2o.shutdown()
h2o.shutdown()
